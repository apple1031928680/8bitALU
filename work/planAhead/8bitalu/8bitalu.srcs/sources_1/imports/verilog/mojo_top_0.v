/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] alufn;
  
  reg [7:0] M_test_counter_d, M_test_counter_q = 1'h0;
  
  wire [8-1:0] M_alu_out;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 4'd0;
  localparam ADD_state = 4'd1;
  localparam SUB_state = 4'd2;
  localparam AND_state = 4'd3;
  localparam OR_state = 4'd4;
  localparam XOR_state = 4'd5;
  localparam LDR_state = 4'd6;
  localparam SHL_state = 4'd7;
  localparam SHR_state = 4'd8;
  localparam SRA_state = 4'd9;
  localparam CMPEQ_state = 4'd10;
  localparam CMPLT_state = 4'd11;
  localparam CMPLE_state = 4'd12;
  localparam PASS_state = 4'd13;
  localparam FAIL_state = 4'd14;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_test_counter_d = M_test_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a[0+7-:8] = io_dip[0+7-:8];
    b[0+7-:8] = io_dip[8+7-:8];
    alufn = io_dip[16+0+5-:6];
    M_alu_a = a;
    M_alu_b = b;
    M_alu_alufn = alufn;
    
    case (M_state_q)
      IDLE_state: begin
        M_test_counter_d = 1'h0;
      end
      ADD_state: begin
        alufn = 6'h00;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = SUB_state;
          M_test_counter_d = 1'h0;
          M_alu_a = 8'h01;
          M_alu_b = 8'h01;
          if (M_alu_out != 8'h02) begin
            M_state_d = FAIL_state;
          end
        end
      end
      SUB_state: begin
        alufn = 6'h01;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = AND_state;
          M_test_counter_d = 1'h0;
        end
      end
      AND_state: begin
        alufn = 6'h18;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = OR_state;
          M_test_counter_d = 1'h0;
        end
      end
      OR_state: begin
        alufn = 6'h1e;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = XOR_state;
          M_test_counter_d = 1'h0;
        end
      end
      XOR_state: begin
        alufn = 6'h16;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = LDR_state;
          M_test_counter_d = 1'h0;
        end
      end
      LDR_state: begin
        alufn = 6'h1a;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = SHL_state;
          M_test_counter_d = 1'h0;
        end
      end
      SHL_state: begin
        alufn = 6'h20;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = SHR_state;
          M_test_counter_d = 1'h0;
        end
      end
      SHR_state: begin
        alufn = 6'h21;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = SRA_state;
          M_test_counter_d = 1'h0;
        end
      end
      SRA_state: begin
        alufn = 6'h23;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = CMPEQ_state;
          M_test_counter_d = 1'h0;
        end
      end
      CMPEQ_state: begin
        alufn = 6'h33;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = CMPLT_state;
          M_test_counter_d = 1'h0;
        end
      end
      CMPLT_state: begin
        alufn = 6'h35;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = CMPLE_state;
          M_test_counter_d = 1'h0;
        end
      end
      CMPLE_state: begin
        alufn = 6'h37;
        if (M_test_counter_q[0+7-:8] == 8'hff) begin
          M_state_d = PASS_state;
          M_test_counter_d = 1'h0;
        end
      end
      PASS_state: begin
        M_test_counter_d = 1'h0;
        io_sel = 4'h7;
        io_seg = 7'h0c;
      end
      FAIL_state: begin
        M_test_counter_d = 1'h0;
        io_sel = 4'h7;
        io_seg = 7'h0e;
      end
    endcase
    if (io_button[0+0-:1]) begin
      M_test_counter_d = 1'h0;
      M_state_d = ADD_state;
    end
    M_test_counter_d = M_test_counter_q + 1'h1;
    io_led[0+7-:8] = M_alu_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_test_counter_q <= 1'h0;
    end else begin
      M_test_counter_q <= M_test_counter_d;
    end
  end
  
endmodule
