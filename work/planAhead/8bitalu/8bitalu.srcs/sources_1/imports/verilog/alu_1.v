/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] out
  );
  
  
  
  wire [8-1:0] M_adder_out;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder_10 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .out(M_adder_out)
  );
  
  wire [8-1:0] M_boolean_out;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn;
  boolean_11 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn(M_boolean_alufn),
    .out(M_boolean_out)
  );
  
  wire [8-1:0] M_compare_out;
  reg [8-1:0] M_compare_a;
  reg [8-1:0] M_compare_b;
  reg [6-1:0] M_compare_alufn;
  compare_12 compare (
    .a(M_compare_a),
    .b(M_compare_b),
    .alufn(M_compare_alufn),
    .out(M_compare_out)
  );
  
  wire [8-1:0] M_shifter_out;
  reg [8-1:0] M_shifter_a;
  reg [8-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shifter_13 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  wire [8-1:0] M_multiplier_out;
  reg [8-1:0] M_multiplier_a;
  reg [8-1:0] M_multiplier_b;
  reg [6-1:0] M_multiplier_alufn;
  multiplier_14 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .alufn(M_multiplier_alufn),
    .out(M_multiplier_out)
  );
  
  always @* begin
    out = 1'h0;
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_compare_a = a;
    M_compare_b = b;
    M_compare_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn;
    M_multiplier_a = a;
    M_multiplier_b = b;
    M_multiplier_alufn = alufn;
    
    case (alufn)
      6'h00: begin
        out = M_adder_out;
      end
      6'h01: begin
        out = M_adder_out;
      end
      6'h02: begin
        out = M_multiplier_out;
      end
      6'h18: begin
        out = M_boolean_out;
      end
      6'h1e: begin
        out = M_boolean_out;
      end
      6'h16: begin
        out = M_boolean_out;
      end
      6'h1a: begin
        out = M_boolean_out;
      end
      6'h33: begin
        out = M_compare_out;
      end
      6'h35: begin
        out = M_compare_out;
      end
      6'h37: begin
        out = M_compare_out;
      end
      6'h20: begin
        out = M_shifter_out;
      end
      6'h21: begin
        out = M_shifter_out;
      end
      6'h23: begin
        out = M_shifter_out;
      end
    endcase
  end
endmodule
