module test_error (
    input clk,  // clock
    input rst,  // reset
    input start,
    output status[2] // 0 = not done; 1 = pass; 2 = fail
    
  ) {
  
  dff test_counter[4](.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst) {
      fsm state = {IDLE, TEST, PASS, FAIL};  
    }    
  }
  adder adder;
    
  always {  
    status = 0;
    adder.a = 0;
    adder.b = 0;
    adder.alufn = 6d0;
    
    if(start == 0){ 
      state.d = state.IDLE;
    }
    
    case(state.q) {
      state.IDLE:
        status = 0;
        if(start == 1) {
          state.d = state.TEST;
        }
        
      // for error inducing testing, ADD result is replaced by SUB result. 
        
      state.TEST:
        case(test_counter.q) {
          4h0:
          //Negative + Negative, No Overflow
            adder.alufn = Inst.SUB;
            adder.a = 8hFF;
            adder.b = 8hFF;
            
            if(adder.out != 8hFE) {
              state.d = state.FAIL;
            }             
          4h1:
          //Positive + Positive, No Overflow
            adder.alufn = Inst.SUB;
            adder.a = 8h01;
            adder.b = 8h01;
            
            if(adder.out != 8h2) {
              state.d = state.FAIL;
            }             
          4h2:
          //Negative + Negative, Overflow
            adder.alufn = Inst.SUB;
            adder.a = 8h80;
            adder.b = 8h80;
            
            if(adder.out != 8h00) {
              state.d = state.FAIL;
            }
          4h3:
          //Positive + Positive, Overflow
            adder.alufn = Inst.SUB;
            adder.a = 8h7F;
            adder.b = 8h7F;
            
            if(adder.out != 8hFE) {
              state.d = state.FAIL;
            }
          4h4:
          //Positive + Negative (Never overflow)
            adder.alufn = Inst.SUB;            
            adder.a = 8h7F;
            adder.b = 8h8F;
            
            if(adder.out != 8h0E) {
              state.d = state.FAIL;
            }            
          4h5:
          //Zero + Zero
            adder.alufn = Inst.SUB;            
            adder.a = 8h00;
            adder.b = 8h00;
            
            if(adder.out != 8h00) {
              state.d = state.FAIL;
            }
          4h6:
          //Negative - Negative, Never Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8hFF;
            adder.b = 8hFF;
            
            if(adder.out != 8h00) {
              state.d = state.FAIL;
            }             
          4h7:
          //Positive - Positive, Never Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8h01;
            adder.b = 8h01;
            
            if(adder.out != 8h00) {
              state.d = state.FAIL;
            }             
          4h8:
          //Negative - Positive, Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8h80;
            adder.b = 8h01;
            
            if(adder.out != 8h7F) {
              state.d = state.FAIL;
            }
          4h9:
          //Positive - Negative, Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8h7F;
            adder.b = 8h81;
            
            if(adder.out != 8hFE) {
              state.d = state.FAIL;
            }
          4hA:
          //Negative - Positive, No Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8hFF;
            adder.b = 8h01;
            
            if(adder.out != 8hFE) {
              state.d = state.FAIL;
            }
          4hB:
          //Positive - Negative, No Overflow
            adder.alufn = Inst.ADD;
            adder.a = 8h01;
            adder.b = 8hFF;
            
            if(adder.out != 8h02) {
              state.d = state.FAIL;
            }                         
          4hC:
          //Zero - Zero
            adder.alufn = Inst.ADD;            
            adder.a = 8h00;
            adder.b = 8h00;
            
            if(adder.out != 8h00) {
              state.d = state.FAIL;
            }            
            
          4hF:
             state.d = state.PASS;            
        }
      state.PASS:
        status = 1;
      state.FAIL:
        status = 2;
    }
    
    test_counter.d = test_counter.q + 1;
  }
}
