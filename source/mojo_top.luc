global Inst {
  const ADD = 6h0;
  const SUB = 6h1;
  const MUL = 6h2;
  const AND = 6h18;
  const OR = 6h1e;
  const XOR = 6h16;
  const LDR = 6h1a;
  const SHL = 6h20;
  const SHR = 6h21;
  const SRA = 6h23;
  const CMPEQ = 6h33;
  const CMPLT = 6h35;
  const CMPLE = 6h37;
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig a[8]; 
  sig b[8]; 
  sig alufn[6];
  dff test_counter[8](.clk(clk), .rst(rst));
  alu alu;
  test_adder test_adder;
  test_compare test_compare; 
  test_bool test_bool;
  test_shifter test_shifter;
  test_multiplier test_multiplier;
       
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      fsm state = {IDLE, ADDER, COMPARE, BOOL, SHIFTER, MULTIPLY};  
      multi_seven_seg seg;
    }    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    test_adder.clk = clk;
    test_adder.rst = rst;
    test_compare.clk = clk;
    test_compare.rst = rst;
    test_bool.clk = clk;
    test_bool.rst = rst;
    test_shifter.clk = clk;
    test_shifter.rst = rst;
    test_multiplier.clk = clk;
    test_multiplier.rst = rst;    
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    seg.values = {4d15, 4d15, 4d15, 4d15};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    // Manual
    a[7:0] = io_dip[0];
    b[7:0] = io_dip[1];
    alufn = io_dip[2][5:0];   
    
    alu.a = a;
    alu.b = b;
    alu.alufn = alufn; 
    
    test_adder.start = 0;
    test_compare.start = 0;
    test_bool.start = 0;
    test_shifter.start = 0;
    test_multiplier.start = 0;
        
    // Automated testing
    case(state.q) {
      state.IDLE:
        test_counter.d = 0; 
                
      state.ADDER:
        test_adder.start = 1;
        
        if(test_adder.status == 1) {
          // PASS
          seg.values = {4d10, 4d11, 4d5, 4d5}; //PASS
        }
        else if(test_adder.status == 2) {
          // FAIL
          seg.values = {4d11, 4d0, 4d0, 4d13}; //ADDF(ail)
        }
        
      state.COMPARE:
        test_compare.start = 1;
        
        if(test_compare.status == 1) {
          // PASS
          seg.values = {4d10, 4d11, 4d5, 4d5}; //PASS
        }
        else if(test_compare.status == 2) {
          // FAIL
          seg.values = {4d14, 4d0, 4d10, 4d13}; //COPF(ail)
        }
        
      state.BOOL:
        test_bool.start = 1;
        
        if(test_bool.status == 1) {
          // PASS
          seg.values = {4d10, 4d11, 4d5, 4d5}; //PASS
        }
        else if(test_bool.status == 2) {
          // FAIL
          seg.values = {4d8, 4d0, 4d0, 4d13}; //BOOF(ail)
        }

      state.SHIFTER:
        test_shifter.start = 1;
        
        if(test_shifter.status == 1) {
          // PASS
          seg.values = {4d10, 4d11, 4d5, 4d5}; //PASS
        }
        else if(test_shifter.status == 2) {
          // FAIL
          seg.values = {4d5, 4d12, 4d1, 4d13}; //SHIF(ail)
        }
        
      state.MULTIPLY:
        test_multiplier.start = 1;
        
        if(test_multiplier.status == 1) {
          // PASS
          seg.values = {4d10, 4d11, 4d5, 4d5}; //PASS
        }
        else if(test_multiplier.status == 2) {
          // FAIL
          seg.values = {4d2, 4d3, 4d4, 4d13}; //NULF(ail)
        }      
    }
    
    // automated testing triggered on press of io_button[0] (up)
    if(io_button[0]) { //up
        test_counter.d = 0;
        state.d = state.ADDER;
    }
    if(io_button[1]) { //center
        test_counter.d = 0;
        state.d = state.COMPARE;
    }
    if(io_button[2]) { //down
        test_counter.d = 0;
        state.d = state.BOOL;
    }
    if(io_button[3]) { //left
        test_counter.d = 0;
        state.d = state.SHIFTER;
    }
    if(io_button[4]) { //right
        test_counter.d = 0;
        state.d = state.MULTIPLY;
    }
    // TODO: Fail case, multiply case
    
    test_counter.d = test_counter.q + 1;
    
    
    // Set output to ALU
    io_led[0] = alu.out;
  }
}